require 'test_helper'

module ActionProvider
  class ExploitTest < ActiveSupport::TestCase
    setup do
      @home_node = MobileNode.new(device_rating: 4)
      @exploit = MatrixProgram.new(program_name: MatrixProgram::EXPLOIT, rating: 4)
      decker_skills = {
        Skills::CYBERCOMBAT => 4,
        Skills::HACKING => 4
      }

      decker_attributes = {
        Attributes::LOGIC => 5
      }

      @decker = Decker.from_node(
        home_node: @home_node,
        programs: [@exploit],
        skills: decker_skills,
        attributes: decker_attributes
      )

      @target = DesktopNode.new(device_rating: 4, programs: [], agents: [])

      @known_data = {
        @decker => {}
      }
      @extended_actions = {
        @decker => {
          'exploit' => [
            @target => HackingProcess.new(
              target_node: @target,
              hacker: @decker,
              attempts: 1,
              hacker_total_hits: 4,
              node_total_hits: 1,
              probing: false,
              account_type: HackingProcess::SECURITY_ACCOUNT
            )
          ]
        }
      }
      @game_state = MockState.new(@decker, @known_data, [@home_node, @target])
    end

    test '#actions returns [] unless the current actor is running an exploit program' do
      @decker.stubs(programs: [])
      assert_empty ActionProvider::Exploit.new(game_state: @game_state).actions
    end

    test '#actions returns current running exploit attempts' do
      game_state = MockState.new(@decker, @known_data, [@home_node, @target], @extended_actions)
      game_state.stubs(connectable_nodes: [])
      assert_equal @extended_actions[@decker]['exploit'], ActionProvider::Exploit.new(game_state: game_state).actions
    end

    test '#actions returns 1 action for each account type and connectable node' do
      game_state = MockState.new(@decker, @known_data, [@home_node, @target], { @decker => {}})
      game_state.stubs(connectable_nodes: [@target])
      actions = ActionProvider::Exploit.new(game_state: game_state).actions
      assert_equal 3, actions.length
      assert_equal [@target, @target, @target], actions.map(&:keys).flatten
    end
  end
end
