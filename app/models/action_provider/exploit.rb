module ActionProvider
  class Exploit < BaseProvider
    def actions
      return [] unless current_actor.get_program_rating(MatrixProgram::EXPLOIT) > 0

      actions = []

      hack_started = extended_actions[current_actor][:exploit]
      actions.concat(hack_started)
      [HACKING_PROCESS::USER_ACCOUNT, HACKING_PROCESS::SECURITY_ACCOUNT, HACKING_PROCESS::ADMIN_ACCOUNT].each do |acc_type|
        actions.concat(
          (connectable_nodes - hack_started.keys).map do |node|
            {
              node => HackingProcess.new(
                target_node: node,
                hacker: current_actor,
                attempts: 0,
                hacker_total_hits: 0,
                node_total_hits: 0,
                probing: false,
                account_type: acc_type
              )
            }
          end
        )
      end
      # actions.concat(current_actor.nodes_present_in.map { |node| { node => [] }}) # build the CRASH NODE details
      # actions.concat(current_actor.nodes_present_in.map { |node| { node => [] }}) # build the CRASH PROGRAM for every program on each ndoe details

      actions
    end
  end
end
